--- libguile/stime.c.orig	2017-12-31 19:36:15.000000000 +0900
+++ libguile/stime.c	2017-12-31 19:36:36.000000000 +0900
@@ -61,11 +61,7 @@
 #include "libguile/stime.h"
 
 #include <unistd.h>
-
-
-#ifdef HAVE_CLOCK_GETTIME
-# include <time.h>
-#endif
+#include <time.h>				  /* Gnulib-provided */
 
 #include <sys/types.h>
 #include <string.h>
@@ -275,9 +271,7 @@
 {
   timet timv;
 
-  SCM_CRITICAL_SECTION_START;
   timv = time (NULL);
-  SCM_CRITICAL_SECTION_END;
   if (timv == -1)
     SCM_MISC_ERROR ("current time not available", SCM_EOL);
   return scm_from_long (timv);
@@ -331,7 +325,8 @@
   return result;
 }
 
-static char tzvar[3] = "TZ";
+static const char tzvar[3] = "TZ";
+static scm_i_pthread_mutex_t tz_lock = SCM_I_PTHREAD_MUTEX_INITIALIZER;
 
 /* if zone is set, create a temporary environment with only a TZ
    string.  other threads or interrupt handlers shouldn't be allowed
@@ -395,9 +390,11 @@
 
   itime = SCM_NUM2LONG (1, time);
 
-  /* deferring interupts is essential since a) setzone may install a temporary
-     environment b) localtime uses a static buffer.  */
-  SCM_CRITICAL_SECTION_START;
+  /* Mutual exclusion is essential since a) setzone may install a
+     temporary environment b) localtime uses a static buffer.  */
+  scm_dynwind_begin (0);
+  scm_i_dynwind_pthread_mutex_lock (&tz_lock);
+
   oldenv = setzone (zone, SCM_ARG2, FUNC_NAME);
 #ifdef LOCALTIME_CACHE
   tzset ();
@@ -412,7 +409,7 @@
       const char *ptr;
 
       /* copy zone name before calling gmtime or restoring zone.  */
-#if defined (HAVE_TM_ZONE)
+#if defined (HAVE_STRUCT_TM_TM_ZONE)
       ptr = ltptr->tm_zone;
 #elif defined (HAVE_TZNAME)
       ptr = tzname[ (ltptr->tm_isdst == 1) ? 1 : 0 ];
@@ -450,9 +447,9 @@
     zoff += 24 * 60 * 60;
 
   result = filltime (&lt, zoff, zname);
-  SCM_CRITICAL_SECTION_END;
-
   free (zname);
+
+  scm_dynwind_end ();
   return result;
 }
 #undef FUNC_NAME
@@ -483,11 +480,11 @@
 #if HAVE_GMTIME_R
   bd_time = gmtime_r (&itime, &bd_buf);
 #else
-  SCM_CRITICAL_SECTION_START;
+  scm_i_pthread_mutex_lock (&tz_lock);
   bd_time = gmtime (&itime);
   if (bd_time != NULL)
     bd_buf = *bd_time;
-  SCM_CRITICAL_SECTION_END;
+  scm_i_pthread_mutex_unlock (&tz_lock);
 #endif
   if (bd_time == NULL)
     SCM_SYSERROR;
@@ -505,7 +502,7 @@
 static void
 bdtime2c (SCM sbd_time, struct tm *lt, int pos, const char *subr)
 {
-  SCM_ASSERT (scm_is_simple_vector (sbd_time)
+  SCM_ASSERT (scm_is_vector (sbd_time)
 	      && SCM_SIMPLE_VECTOR_LENGTH (sbd_time) == 11,
 	      sbd_time, pos, subr);
 
@@ -521,7 +518,7 @@
 #if HAVE_STRUCT_TM_TM_GMTOFF
   lt->tm_gmtoff = - scm_to_int (SCM_SIMPLE_VECTOR_REF (sbd_time, 9));
 #endif
-#ifdef HAVE_TM_ZONE
+#ifdef HAVE_STRUCT_TM_TM_ZONE
   if (scm_is_false (SCM_SIMPLE_VECTOR_REF (sbd_time, 10)))
     lt->tm_zone = NULL;
   else
@@ -556,7 +553,7 @@
   scm_dynwind_free ((char *)lt.tm_zone);
 #endif
 
-  scm_dynwind_critical_section (SCM_BOOL_F);
+  scm_i_dynwind_pthread_mutex_lock (&tz_lock);
 
   oldenv = setzone (zone, SCM_ARG2, FUNC_NAME);
 #ifdef LOCALTIME_CACHE
@@ -572,7 +569,7 @@
       const char *ptr;
 
       /* copy zone name before calling gmtime or restoring the zone.  */
-#if defined (HAVE_TM_ZONE)
+#if defined (HAVE_STRUCT_TM_TM_ZONE)
       ptr = lt.tm_zone;
 #elif defined (HAVE_TZNAME)
       ptr = tzname[ (lt.tm_isdst == 1) ? 1 : 0 ];
@@ -682,7 +679,7 @@
 
   tbuf = scm_malloc (size);
   {
-#if !defined (HAVE_TM_ZONE)
+#if !defined (HAVE_STRUCT_TM_TM_ZONE)
     /* it seems the only way to tell non-GNU versions of strftime what
        zone to use (for the %Z format) is to set TZ in the
        environment.  interrupts and thread switching must be deferred
@@ -702,7 +699,7 @@
 					 scm_from_locale_string ("0")));
 
 	have_zone = 1;
-	SCM_CRITICAL_SECTION_START;
+        scm_pthread_mutex_lock (&tz_lock);
 	oldenv = setzone (zone, SCM_ARG2, FUNC_NAME);
       }
 #endif
@@ -720,11 +717,11 @@
 	tbuf = scm_malloc (size);
       }
 
-#if !defined (HAVE_TM_ZONE)
+#if !defined (HAVE_STRUCT_TM_TM_ZONE)
     if (have_zone)
       {
 	restorezone (zone_spec, oldenv, FUNC_NAME);
-	SCM_CRITICAL_SECTION_END;
+        scm_i_pthread_mutex_unlock (&tz_lock);
       }
 #endif
     }
@@ -784,11 +781,11 @@
 
   /* GNU glibc strptime() "%s" is affected by the current timezone, since it
      reads a UTC time_t value and converts with localtime_r() to set the tm
-     fields, hence the use of SCM_CRITICAL_SECTION_START.  */
+     fields, hence the mutex.  */
   t.tm_isdst = -1;
-  SCM_CRITICAL_SECTION_START;
+  scm_i_pthread_mutex_lock (&tz_lock);
   rest = strptime (str, fmt, &t);
-  SCM_CRITICAL_SECTION_END;
+  scm_i_pthread_mutex_unlock (&tz_lock);
   if (rest == NULL)
     {
       /* POSIX doesn't say strptime sets errno, and on glibc 2.3.2 for
@@ -834,12 +831,7 @@
 
 #ifdef HAVE_POSIX_CPUTIME
   {
-    clockid_t dummy;
-    
-    /* Only use the _POSIX_CPUTIME clock if it's going to work across
-       CPUs. */
-    if (clock_getcpuclockid (0, &dummy) == 0 &&
-        clock_gettime (CLOCK_PROCESS_CPUTIME_ID, &posix_run_time_base) == 0)
+    if (clock_gettime (CLOCK_PROCESS_CPUTIME_ID, &posix_run_time_base) == 0)
       get_internal_run_time = get_internal_run_time_posix_timer;
     else
       errno = 0;
